version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name back-end-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name front-end-${CIRCLE_WORKFLOW_ID:0:7}
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             # exit 1
      - persist_to_workspace:
          root: .
          paths: [backend/node_modules]
          # name: Compile the code
          # command: |
            # cd backend
            # npm run build
      - persist_to_workspace:
              root: .
              paths: [backend/dist]
      - save_cache:
              paths: [backend/node_modules]
              key: v5-backend-build
      - save_cache:
              paths: [backend/dist]
              key: v4-backend-dist
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install 
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: test back-end
          command: |
            cd backend
            npm install 
            npm run test      
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      # Your job code here
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm update
            npm audit fix --force --audit-level=critical
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      # Your job code here
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm update
            npm update mkdirp --depth 2
            npm update kind-of --depth 11
            npm audit fix
            npm audit fix --force --audit-level=critical
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install utlities
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            backendip=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output=text)
            echo $backendip >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "8c:f0:83:65:03:ad:c1:75:a8:6d:18:ca:35:14:c1:1f"
      # attach workspace
      #- attach_workspace:
            #at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            # exit 1
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            # Your code here
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cd ..            
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      #- image: circleci/node:13.8.0
      - image: cimg/node:18.4.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
      #    # working_directory: /tmp
          command: |
            sudo apt-get update
            echo "*********after update"
            sudo apt-get install npm python3 -y 
            sudo apt-get install python3-pip -y
            echo "********after pyhton install"
            sudo apt-get install unzip  -y
            echo "**********After unzip install"
            sudo pip3 install awscli
            echo "*********after awscli install"

      - run:
          name: Configure server
          command: |
            # Your code here
            echo "********printing env variable"
            echo $TYPEORM_HOST
            echo $TYPEORM_PORT
            echo $TYPEORM_USERNAME
            echo $TYPEORM_PASSWORD
            echo "***** printing env info"
            cd backend
            touch ".env"
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env

      - run:
          name: install npm
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            # Your code here
            cd backend
            sudo npm run migrations > migrations_dump.txt
      # - run:
        #  name: install awscli
        #  command: |
        #    sudo apt-get -y -qq update
        #    sudo apt-get -qq install awscli
        #    sudo apt-get -y -qq install python3
        #    sudo npm install pm2 -g
      # - run:
          #name: Run migrations

          #command: |
            # Your code here
            #cd backend
            #npm install
            #npm update
            #echo "****npm install complete"
            #npm audit fix 
            # --force --audit-level=critical
            #echo "****fixed vulnerability using npm audit"
            # npm run build
            #echo "****** Build complete **********"
            # Run and save the migration output
            #npm run migrations > migrations_dump.txt
            #echo "migration data copied to text file"
            #cat migrations_dump.txt
            # exit 1
      #- save_cache:
          #paths: [backend/node_modules]
          #key: backend-build
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/PJadm6GGWF8BCwhUURsZGB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
              # exit 1
     # Here's where you will add some code to rollback on failure
      #- revert-migrations:
          #workflow_id: ${CIRCLE_WORKFLOW_ID}
      #- destroy-environment:
          #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            echo "after installing tar and gzip"
            yum -y install ansible python3
            echo "after installing ansible and python"
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
            cat "frontend/.env"
      - attach_workspace:
            at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople" \
              --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL=$API_URL >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
            cat "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      #- revert-migrations:
         #workflow_id: ${CIRCLE_WORKFLOW_ID}
      #- destroy-environment:
          #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
     
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
              - "8c:f0:83:65:03:ad:c1:75:a8:6d:18:ca:35:14:c1:1f"
      # attach workspace
      - attach_workspace:
            at: ~/
      
      - run:
          name: Install dependencies
          command: |
            # your code here
            pwd
            ls -ltr
            echo "***********after path and files command"
            apk add --update tar gzip ansible nodejs npm curl zip
            echo "*****after apk update"
            pip install awscli
            echo "***********after awscli install"
            #npm install
            apk add openssh-client
            echo "*******After installing openssh"

      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: install node modules
          command: |
            cd /root/project/backend
            npm install
            
      - run:
          name: zip backend files
          command: |
            pwd
            cd backend
            #npm i
            npm run build
            cd ..
            pwd
            tar czf backend.tar.gz backend
            ls -l 
            cd .circleci/ansible/roles/deploy
            mkdir files
            #sudo chmod 777 files
            cd /root/project/
            cp backend.tar.gz .circleci/ansible/roles/deploy/files/
            ls -l
            #mv backend.tar.gz /home/ubuntu
            #cd /home/ubuntu
            #ls -l
            #cp backend.tar.gz /home/ubuntu
            #cp backend.tar.gz ~/

      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            #npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt -c ssh deploy-backend.yml
            #ansible-playbook -vvvv -i ~/inventory.txt main.yml -u ubuntu
      # Here's where you will add some code to rollback on failure  
      #- revert-migrations:
          #workflow_id: ${CIRCLE_WORKFLOW_ID}
      #- destroy-environment:
          #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.10.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip ansible nodejs npm curl zip
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            #export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo http://${BACKEND_IP}:3030/api/status
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl -s "$(API_URL)/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi  
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout          
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export oldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --region us-east-1 --no-paginate --output text)
            echo $oldWorkflowID >> oldWorkflowID.txt
            echo "oldWorkflowID is -------"
            cat oldWorkflowID.txt
            echo Current workflow ID ${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-Cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # export OldWorkflowID="the id here"
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the Old workflow ID
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            # export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            for stack in ${STACKS[@]}; do
                  if [[ $stack == *"${CIRCLE_WORKFLOW_ID:0:7}"* ]]
                    then
                      echo "Newly created stack, Don't delete!"
                      echo "$stack"
                    else
                      if [[ "$stack" == *"-end-"* ]]; then
                        echo "Old Stack to be deleted"
                        echo "$stack"
                        export OldWorkflowID=${stack##*-}
                        echo $OldWorkflowID
                        aws cloudformation delete-stack --stack-name "back-end-${OldWorkflowID}"
                        aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name "front-end-${OldWorkflowID}"
                      fi
                  fi
              done
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              # your code here
            #fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master] # [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]